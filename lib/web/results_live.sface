<div
  id="the_search_results"
  phx-update="replace"
  data-page={e(@page, [])}
  class="divide-y divide-base-content/20"
>
  {#if @searching && e(@hits, []) == []}
    <div class="flex items-center justify-center py-8">
      <span class="loading loading-spinner loading-md" />
    </div>
  {#elseif @searching_direct && e(@hits, []) != []}
    <div class="flex items-center justify-center py-2 text-sm text-base-content/70">
      <span class="loading loading-spinner loading-xs mr-2" />
      {if String.starts_with?(@search, "http"),
        do: l("Searching for a matching federated activity..."),
        else: l("Searching for a matching federated profile...")}
    </div>
  {/if}

  {#for {hit, index} <- Enum.with_index(e(@hits, []))}
    <div class="">
      {#case hit}
        {#match %{activity: %{id: id} = activity} = hit}
          <StatefulComponent
            module={maybe_component(Bonfire.UI.Social.ActivityLive)}
            id={deterministic_dom_id(__MODULE__, id, "search_activity", nil)}
            showing_within={:search}
            parent_id={"search-act-" <> id}
            activity={activity}
            check_object_boundary={false}
          />
          <!-- check_object_boundary={not is_nil(Bonfire.Search.adapter())} -->
          <!-- object={Map.drop(hit, [:activity])} -->
        {#match %{id: id} = hit}
          <StatefulComponent
            module={maybe_component(Bonfire.UI.Social.ActivityLive, @__context__)}
            id={e(hit, :index_type, "so-") <>
              deterministic_dom_id("search_result", hit[:index_type], hit[:name] || hit[:title], index)}
            parent_id={"search-obj-" <> deterministic_dom_id("search_result", hit[:index_type], hit[:name] || hit[:title], index)}
            showing_within={:search}
            object={hit}
            check_object_boundary={false}
          />
      {/case}
    </div>
  {#else}
    {!-- no results --}
    <Bonfire.UI.Common.EmptyFeed
      feedback_title={l("Nothing relevant was found")}
      feedback_message=""
    />
  {/for}

  <Bonfire.UI.Common.LoadMoreLive
    :if={@page_info}
    page_info={@page_info}
    live_handler="Bonfire.Search.LiveHandler"
    context="search"
    hide_guest_fallback={false}
    hide_if_no_more
  >
    <:if_no_more>
      <p class="text-center text-base-content/70 py-4">{l("That's all the search results!")}</p>
    </:if_no_more>
  </Bonfire.UI.Common.LoadMoreLive>
</div>
